
########################
# == Helper Entities == #
#########################

type MetaPtr @entity {
  id: ID! # id = "[project|program]-{project.id.toHex()}"
  protocol: BigInt
  pointer: String
}

#######################
# ===== Project ===== #
#######################

type Project @entity {
  id: ID!
  accounts: [AccountProject!]! @derivedFrom(field: "project")
  projectMetadata: MetaPtr
  programMetadata: MetaPtr
  rounds: [Round!]! @derivedFrom(field: "program") # rounds created by this
  applications: [RoundApplication!] @derivedFrom(field: "project") # rounds applied by this
  payouts: [Payout!] @derivedFrom(field: "project")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Account @entity {
  id: ID!
  address: String!
  projects: [AccountProject!]! @derivedFrom(field: "account")
}

type AccountProject @entity {
  id: ID! # keccak256(project.id, account.address)
  account: Account!
  project: Project!
}

#######################
# == Allo Settings == #
#######################

type AlloSetting @entity {
  id: ID!
  protocolFeePercentage: Int
  protocolTreasury: String
}

########################
# ===== Round ===== #
########################

# id = roundAddress.toHex()
type Round @entity {
  id: ID!
  program: Project!
  roles: [RoundRole!]! @derivedFrom(field: "round") # TODO - admin or operator
  accounts: [RoundAccount!]! @derivedFrom(field: "round") # TODO - admin or operator
  projects: [RoundApplication!] @derivedFrom(field: "round") # TODO - applications
  alloSetting: AlloSetting!
  votingStrategy: String! # TODO - this will be allocation strategy
  payoutStrategy: PayoutStrategy
  applicationsStartTime: String!
  applicationsEndTime: String!
  roundStartTime: String!
  roundEndTime: String!
  roundMetaPtr: MetaPtr! # id = "roundMetaPtr-{roundAddress.toHex()}"
  applicationMetaPtr: MetaPtr! # id = "applicationMetaPtr-{roundAddress.toHex()}"
  projectsMetaPtr: MetaPtr # id = "projectsMetaPtr-{roundAddress.toHex()}"
  createdAt: BigInt!
  updatedAt: BigInt!
  version: String!
}

# id = round.toHex()-role.toHex()
type RoundRole @entity {
  id: ID!
  role: String!
  accounts: [RoundAccount!] @derivedFrom(field: "role")
  round: Round!
}

# id = keccak256(Round.id, RoundRole.role, _account.address)
type RoundAccount @entity {
  id: ID!
  address: String!
  role: RoundRole!
  round: Round!
}

# id: round.toHex()-applicationIndex.toString()
type RoundApplication @entity {
  id: ID!
  project: Project!
  applicationIndex: Int!
  status: Int!
  metaPtr: MetaPtr!
  round: Round!
  payoutAddress: String
  sender: String!
  createdAt: BigInt!
  updatedAt: BigInt!
  statusSnapshots: [StatusSnapshot!] @derivedFrom(field: "application")
}

# id: round.toHex()-applicationIndex.toString()-status
type StatusSnapshot @entity {
  id:ID!
  application: RoundApplication!
  status: Int!
  timestamp: BigInt!
}

######################
# = PayoutStrategy = #
######################

# id = payoutContractAddress.toHex()
interface PayoutStrategy {
  id: ID!
  strategyName: String!
  strategyAddress: String!
  strategyImplementationAddress: String!
  round: Round @derivedFrom(field: "payoutStrategy")
  payouts: [Payout!] @derivedFrom(field: "payoutStrategy")
  version: String!
  createdAt: BigInt!
  updatedAt: BigInt!
}


# id = payoutContractAddress.toHex()
type MerklePayout implements PayoutStrategy @entity {
  id: ID!
  strategyName: String!
  strategyAddress: String!
  strategyImplementationAddress: String!
  round: Round @derivedFrom(field: "payoutStrategy")
  payouts: [Payout!] @derivedFrom(field: "payoutStrategy")
  version: String!
  createdAt: BigInt!
  updatedAt: BigInt!

  isReadyForPayout: Boolean!
  distributionMetaPtr: MetaPtr # id = "distributionMetaPtr-{payoutContractAddress.toHex()}"
  token: String!
  matchAmount: BigInt!
}

# id = payoutContractAddress.toHex()
type DirectPayout implements PayoutStrategy @entity {
  id: ID!
  strategyName: String!
  strategyAddress: String!
  strategyImplementationAddress: String!
  round: Round @derivedFrom(field: "payoutStrategy")
  payouts: [Payout!] @derivedFrom(field: "payoutStrategy")
  version: String!
  createdAt: BigInt!
  updatedAt: BigInt!

  vaultAddress: String!
  alloSetting: AlloSetting!
  roundFeePercentage: BigInt!
  roundFeeAddress: String!
}

# id = keccak256(event.receipt.transactionHash.toHex(), Payout.projectId)
type Payout @entity {
  id: ID!
  payoutStrategy: PayoutStrategy!
  version: String!
  createdAt: BigInt!
  amount: BigInt!
  token: String!
  grantee: String!
  project: Project!
  txnHash: String!
  # round: Round!
}
